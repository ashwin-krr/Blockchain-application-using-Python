from functools import reduce
import hashlib as hl
from collections import OrderedDict
import json

from hash_util import hash_string_256, hash_block
MINING_REWARD = 10

genesis_block = {
    'previous_hash' : ' ',
    'index' : 0,
    'transactions' : [],
    'proof' : 1000
    }
blockchain = [genesis_block]
open_transactions = []
owner = 'Ashwin'
participants = {'Ashwin'}

def save_data():
     with open('blockchain.txt', mode='w') as f:
         f.write(json.dumps(blockchain))
         f.write('\n')
         f.write(json.dumps(open_transactions))

def load_data():
    with open('blockchain.txt', mode='r') as f:
        file_content = f.readlines()
        global blockchain
        global open_transactions
        blockchain = json.loads(file_content[0][:-1])
        updated_blockchain = []
        for block in blockchain:
            updated_block = {
                'previous_hash': block['previous_hash'],
                'index': block['index'],
                'proof': block['proof'],
                'transactions': [OrderedDict(
                    [('sender', tx['sender']), ('recipient', tx['recipient']), ('amount', tx['amount'])]) for tx in block['transactions']]
            }
            updated_blockchain.append(updated_block)
        blockchain = updated_blockchain
        open_transactions = json.loads(file_content[1])

load_data()

# TO GENERATE PoW hash AND CHECK IF THE GIVEN CONDITION SUFFICES --> (guess_hash[0:2] == '00')
def valid_proof(transactions, last_hash, pow_num):
    guess = (str(transactions) + str(last_hash) + str(pow_num)).encode()
    guess_hash = hash_string_256(guess)
    print(guess_hash)
    return guess_hash[0:2] == '00'

# TO VALIDATE PoW 
def proof_of_work():
    last_block = blockchain[-1]
    last_hash = hash_block(last_block)
    pow_num = 0
    while not valid_proof(open_transactions, last_hash, pow_num):
        pow_num += 1
    return pow_num


# TO RETURN THE BALANCE AMOUNT OF THE USER
def get_balance(participant):
    tx_sender = [[tx['amount'] for tx in block['transactions'] if tx['sender'] == participant] for block in blockchain]
    open_tx_sender = [tx['amount'] for tx in open_transactions if tx['sender'] == participant]
    tx_sender.append(open_tx_sender)
    amount_sent = reduce(lambda tx_sum, tx_amt: tx_sum + sum(tx_amt) if len(tx_amt) > 0 else tx_sum, tx_sender, 0)
    # amount_sent = 0
    # for tx in tx_sender:
    #     if len(tx) > 0:
    #         amount_sent += tx[0]
    tx_recipient = [[tx['amount'] for tx in block['transactions'] if tx['recipient'] == participant] for block in blockchain]
    amount_received = reduce(lambda tx_sum, tx_amt: tx_sum + sum(tx_amt) if len(tx_amt) > 0 else tx_sum, tx_recipient, 0)

    # amount_received = 0
    # for tx in tx_recipient:
    #      if len(tx) > 0:
    #          amount_received += tx[0]
    return amount_received - amount_sent

# TO VERIFY THE BALANCE FOR TRANSACTION
def verify_transaction(transaction):
    sender_balance = get_balance(transaction['sender'])
    return sender_balance >= transaction['amount']

    #THE ABOVE CODE CAN BE WRITTEN AS BELOW TOO BUT INCREASES LINES OF CODE
   
    # if sender_balance >= transaction['amount']:
    #     return True
    # else:
    #     return False

# RETURNS CURRENT BLOCKCHAIN LIST
def get_last_bc_value():
    if len(blockchain) < 1:
        return None
    return blockchain[-1]   


# TO ADD A NEW VALUE TO THE BLOCKCHAIN
def add_txn(recipient, sender=owner, amount = 1.0):

    ''' 
    Arguements: 
    Sender - The sender of the coins
    Recipent - The recipent of the coins
    Amount - The amount of coins transferred (Default value = 1.0)
    '''
    # transaction = {
    #     'sender' : sender, 
    #     'recipient' : recipient, 
    #     'amount' : amount}
    transaction = OrderedDict([('sender', sender), ('recipient', recipient), ('amount', amount)])
    
    if verify_transaction(transaction):
         open_transactions.append(transaction)
         participants.add(sender)
         participants.add(recipient)
         save_data()
         return True
    return False

#TO MINE A NEW BLOCK IN THE BLOCKCHAIN
def mine_block():
    last_block = blockchain[-1]
    hashed_block = hash_block(last_block)
    proof = proof_of_work()
    # reward_transaction = {
    #     'sender' : 'MINING',
    #     'recipient' : owner,
    #     'amount' : MINING_REWARD
    # }
    reward_transaction = OrderedDict([('sender', 'MINING'), ('recipient', owner), ('amount', MINING_REWARD)])
    copied_transactions = open_transactions[:]
    copied_transactions.append(reward_transaction)
    # for key in last_block:
    #     value = last_block[key]
    #     hashed_block += str(value)
       
    block = {
             'previous_hash' : hashed_block,
             'index' : len(blockchain),
             'transactions' : copied_transactions,
             'proof' : proof
     }
    blockchain.append(block)
    return True
               

# TO REDUCE CODE REDUNDANCY OR REPITITION
def get_trans_amt():
    tx_recipient = input('Enter the recipient name: ')
    tx_amount = float(input('Enter the amount of coins: '))
    return tx_recipient, tx_amount

# TO GET USER CHOICE
def get_user_choice():
    user_choice = input('Enter your choice:')
    return user_choice

# TO PRINT THE BLOCKCHAIN VALUES
def print_blockchain_values():
    
# FOR LOOP TO OUTPUT THE BLOCKCHAIN 
 for block in blockchain:
     print('The Blockchain is being updated')
     print(block)
 else:
     print('-' * 20)
    
#TO PRINT OPEN TRANSACTIONS
def print_open_transactions():
    print(open_transactions)

# TO VERIFY THE BLOCKCHAIN
def verify_blockchain():
    for (index, block) in enumerate(blockchain):
        if index == 0:
            continue
        if block['previous_hash'] != hash_block(blockchain[index - 1]):
            return False
        if not valid_proof(block['transactions'][:-1], block['previous_hash'], block['proof']):
            return True
    return True  

# TO VERIFY ONE PARTICULAR TRANSACTION
def verify_transactions():
    return all([verify_transaction(tx) for tx in open_transactions])
         
   
waiting_for_input = True        

# USING LOOPS AND CONDITIONALS
while waiting_for_input:
    print('Select an option')
    print('1.Enter transaction amount')
    print('2.Mine a new block')
    print('3.Print the blockchain')
    print('4.Print the open transactions')
    print('5.Check transaction validity')
    print('6.Print the participants')
    print('m to manipulate the blockchain')
    print('q to quit')
    user_choice = get_user_choice()

    if user_choice == '1':
        tx_data = get_trans_amt()
        recipient, amount = tx_data
        if add_txn(recipient, amount=amount):
            print('Transaction successfully added!')
        else:
            print('Transaction Failed')
        print(open_transactions)

   # TO MINE A NEW BLOCK
    elif user_choice == '2':
       if mine_block():
           open_transactions = []
           save_data()
   
   # TO PRINT THE BLOCKCHAIN
    elif user_choice == '3':
        print_blockchain_values()

   # TO PRINT THE OPEN TRANSACTIONS
    elif user_choice == '4':
        print_open_transactions()

    # TO CHECK VALIDITY OF A TRANSACTION
    elif user_choice == '5':
        if verify_transactions():
            print('All transactions are valid')
        else:
            print('There are invalid transactions')

    # TO PRINT THE NAME OF THE PARTICIPANTS
    elif user_choice == '6':
        print(participants)

    # MANIPULATE THE BLOCKCHAIN
    elif user_choice == 'm':
        if len(blockchain) >= 1:
            blockchain[0] = {
    'previous_hash' : ' ',
    'index' : '0',
    'transactions' : [{'sender' : 'Priyanka', 'recipient' : 'Anuradha', 'amount' : 500}]}

   # TO QUIT
    elif user_choice == 'q':
        waiting_for_input = False
    
    else:
        print('Invalid input. Try again!')
        continue
    
    if not verify_blockchain():
        print_blockchain_values()
        print('Invalid blockchain')
        break
    print('Balance of {} : {:.5f}'.format('Ashwin', get_balance('Ashwin'))) 
else:
    print('User left!')
